#!/bin/bash

output_code=OK_$(hostname).log
> $output_code

output_code=WARN_$(hostname).log
> $output_code

output_code=INFO_$(hostname).log
> $output_code



if_case(){ #상태가 적용 되었는지 아닌지 나타내는 함수
  if [ "$test_check" = "$i" ]; then
    check_status="$test_num [OK]"
    output_code=OK_$(hostname).log
    return 0;
  else
    check_status="$test_num [WARN]"
    output_code=WARN_$(hostname).log
    return 1;
  fi
}

if_case2(){ #두개 동시에 비교
  if [ "$test_check" = "$i" ] && [ "$test_check2" = "$j" ] ; then
    check_status="$test_num [OK]"
    output_code=OK_$(hostname).log
    return 0;
  else
    check_status="$test_num [WARN]"
    output_code=WARN_$(hostname).log
    return 1;
  fi
}

if_info(){
  check_status="$test_num [INFO]"
  output_code=INFO_log_name.log
}


## root 접속 안될수 있음 신경 써야함 !!!!!!!!!!!
u1(){ #root 계정의 원격 접속 제한설정
  test_num="u01"
  test_check=`cat /etc/ssh/sshd_config |grep "PermitRootLogin no" |grep -vc '#'`
  i="1"
  if_case

cat << EOF >> $output_code
>>$check_status[0m ( root 계정의 원격접속 제한 설정 )
=========================== $test_num STATUS  ===========================
If the status is WARN or INFO , run the following command.

echo "PermitRootLogin no" >> /etc/ssh/sshd_config
=========================================================================



EOF
}

u2(){ # 패스워드 복잡성 설정
  test_num="u02"
  test_check=`cat /etc/security/pwquality.conf | grep -c 'password requisite pam_cracklib.so try_first_pass retry=3 minlen=8 lcredit=-1 ucredit=-1 dcredit=-1 ocredit=-1'`
  #기존 파일 백업
  if [ "$test_check" = "1" ]; then
    check_status="$test_num [OK]"
    output_code=OK_$(hostname).log
  else
    check_status="$test_num [WARN]"
    output_code=WARN_$(hostname).log
    # 적용
    cp /etc/security/pwquality.conf /etc/security/pwquality.conf.bak
    echo "password requisite pam_cracklib.so try_first_pass retry=3 minlen=8 lcredit=-1 ucredit=-1 dcredit=-1 ocredit=-1" > /etc/security/pwquality.conf
    test_check=`cat /etc/security/pwquality.conf | grep -vc '#'`
    #적용후 다시 검사
    if [ "$test_check" = "1" ]; then
      check_status="$test_num [OK]"
      output_code=OK_$(hostname).log
    fi
  fi

cat << EOF >> $output_code
>>$check_status (  패스워드 복잡성 설정 )
=========================== $test_num STATUS  ===========================
`cat /etc/security/pwquality.conf | grep -v '#'`
=========================================================================



EOF
}

u3(){ #계정 잠금 임계값이 5회이하
  test_num="u03"
  test_check=` cat /etc/pam.d/system-auth  |grep -e  "auth * required "  -e "account * required " |grep -e 'deny=5' -e reset|wc -l`

  if [ "$test_check" = "2" ]; then
    check_status="$test_num [OK]"
    output_code=OK_$(hostname).log
  else
    check_status="$test_num [WARN]"
    output_code=WARN_$(hostname).log
    #적용
    cp /etc/pam.d/system-auth /etc/pam.d/system-auth.bak
    echo "auth required /lib/security/pam_tally.so deny=5 unlock_time=120 no_magic_root"  >> /etc/pam.d/system-auth
    echo "account required /lib/security/pam_tally.so no_magic_root reset" >> /etc/pam.d/system-auth
    #적용후 다시 검사
    test_check=` cat /etc/pam.d/system-auth  |grep -e  "auth * required "  -e "account * required " |grep -e 'deny=5' -e reset|wc -l`
    if [ "$test_check" = "2" ]; then
      check_status="$test_num [OK]"
    fi
  fi

cat << EOF >> $output_code
>>$check_status ( 계정 잠금 임계값이 5회이하 )
=========================== $test_num STATUS  ===========================
`cat /etc/pam.d/system-auth  |grep -e  "auth * required "  -e "account * required " |grep -e 'deny=5' -e reset`
=========================================================================



EOF
}


u4(){ #쉐도우 패스워드를 사용하거나, 패스워드를 암호화하여 저장하는 경우
  test_num="u04"
  test_check=`cat /etc/passwd |grep -c 'root:x:'`
  i="1"
  if_case

  if [ "$?" = "1" ];then
    #여기에 적용할 것들 사용하면 됨
    check_status="$test_num [WARN]"
    output_code=WARN_$(hostname).log
  else
      if [ -f /etc/shadow ];then
        check_status="$test_num [OK]"
        output_code=OK_$(hostname).log
      else
        check_status="$test_num check [WARN]"
        output_code=WARN_$(hostname).log
      fi
  fi


cat << EOF >> $output_code
>>$check_status ( 쉐도우 패스워드를 사용하거나, 패스워드를 암호화하여 저장하는 경우 )
=========================== $test_num STATUS  ===========================
==shadow file
`ls /etc/shadow`
==using passwd
`cat /etc/passwd |grep 'root'`
=========================================================================



EOF

#변수 초기화
unset i test_num check_status test_check
}


u5(){ #root 계정의 PATH 환경변수"."이랑 "::"이 있는지 점검
  test_num="u05"
  test_check=`echo $PATH |grep -c "\."`
  i="0"
  test_check2=`echo $PATH |grep -c "::"`
  j="0"

  if_case2

  if [ "$?" =  "1" ];then
    #여기에 적용할 것들 사용하면 됨
    check_status="$test_num [WARN]"
  fi

cat << EOF >> $output_code
>>$check_status ( )
=========================== $test_num STATUS  ===========================
`echo $PATH`
=========================================================================



EOF
#변수 초기화
unset i test_num check_status test_check
}

u6(){
  test_num="u06"
  test_check=`find / -nouser -o -nogroup -exec ls -l {} \; |wc -l`
  i="0"
  if_case

  if [ "$?" =  "1" ];then
    #여기에 적용할 것들 사용하면 됨
    sudo rm -rf `find / -nouser -o -nogroup -exec ls -l {} \;`
    test_check=`find / -nouser -o -nogroup -exec ls -l {} \; |wc -l`
    if_case
  fi

cat << EOF >> $output_code
>>$check_status ( 소유자 불분명한 파일이나 디렉터리점검 )
=========================== $test_num STATUS  ===========================
`find / -nouser -o -nogroup -exec ls -l {} \; `
=========================================================================




EOF

#변수 초기화
unset i test_num check_status test_check
}

u7(){
  test_num="u07"
  test_check=`ls -al /etc/passwd| grep -c '.rw-r--r--'`
  i="1"
  test_check2=`ls -al /etc/passwd| grep -c 'root'`
  j="1"
  if_case2

  if [ "$?" =  "1" ];then
    #여기에 적용할 것들 사용하면 됨
    sudo chmod 644 /etc/passwd
    sudo chown root /etc/passwd
    test_check=`ls -al /etc/passwd| grep -c '.rw-r--r--'`
    test_check2=`ls -al /etc/passwd| grep -c 'root'`
    if_case2
  fi

cat << EOF >> $output_code
>>$check_status ( )
=========================== $test_num STATUS  ===========================
`ls -al /etc/passwd`
=========================================================================



EOF

#변수 초기화
unset i test_num check_status test_check
}

u8(){
  test_num="u08"
  test_check=`ls -l  /etc/shadow |grep -c root`
  i="1"
  test_check=`ls -l  /etc/shadow |grep -c ".---------"`
  j="1"

  if_case


  if [ "$?" =  "1" ];then
    #여기에 적용할 것들 사용하면 됨
    sudo chown root /etc/passwd
    sudo chmod 000 /etc/passwd
    test_check=`ls -l  /etc/shadow |grep -c root`
    test_check=`ls -l  /etc/shadow |grep -c ".---------"`
    if_case
  fi

cat << EOF >> $output_code
>>$check_status ( /etc/passwd 파일 권한 )
=========================== $test_num STATUS  ===========================
`ls -l  /etc/shadow`
=========================================================================



EOF

#변수 초기화
unset i test_num check_status test_check
}

u9(){
  test_num="u09"
  test_check=`ls -al /etc/hosts |grep -c  ".rw-------."`
  i="1"
  test_check2=`ls -al /etc/hosts |grep -c  "root"`
  j="1"
  if_case2

  if [ "$?" =  "1" ];then
    #여기에 적용할 것들 사용하면 됨
    sudo chmod 600 /etc/hosts
    sudo chown root /etc/hosts

    test_check=`ls -al /etc/hosts |grep -c  ".rw-------."`
    test_check2=`ls -al /etc/hosts |grep -c  "root"`
    if_case2
  fi

cat << EOF >> $output_code
>>$check_status ( /etc/hosts 파일의 권한 적절성 점검 )
=========================== $test_num STATUS  ===========================
`ls -al /etc/hosts`
=========================================================================



EOF

#변수 초기화
unset i test_num check_status test_check
}

u10(){
  test_num="u10"
  if [ -e /etc/xinetd.conf ]; then
    sudo chmod 600 /etc/xinetd.conf
    sudo chmod -R 600 /etc/xinetd.d
    sudo chown root /etc/xinetd.conf
    sudo chown -R  root /etc/xinetd.d

    test_check=`ls -al /etc |grep xinetd.d |grep -c ".rw-------."`
    i="1"
    test_check2=`ls -al /etc/xinetd.conf |grep -c ".rw-------."`
    j="1"

    if_case2

  else
    sudo chmod -R 600 /etc/xinetd.d
    sudo chown -R  root /etc/xinetd.d

    test_check=`ls -al /etc |grep xinetd.d |grep -c ".rw-------."`
    i="1"

    if_case
  fi

cat << EOF >> $output_code
>>$check_status ( /etc/(x)inetd.conf 파일 권한 적절성 점검 )
=========================== $test_num STATUS  ===========================
`ls -al /etc/xinetd.conf`
`ls -al /etc |grep xinetd.d`
`ls -al /etc/xinetd.d`
=========================================================================



EOF

#변수 초기화
unset i test_num check_status test_check
}


u11(){
  test_num="u11"

  if [ -e /etc/rsyslog.conf ]; then
    chmod 640 /etc/rsyslog.conf
    chown root /etc/rsyslog.conf

    test_check=`ls -al /etc/rsyslog.conf |grep -c ".rw-r-----."`
    i="1"
    if_case

  else
    chmod 640 /etc/syslog.conf
    chown root /etc/syslog.conf

    test_check=`ls -al /etc/syslog.conf |grep -c ".rw-r-----."`
    i="1"
    if_case

  fi

cat << EOF >> $output_code
>>$check_status ( /etc/syslog.conf 파일 권한 적절성 점검 )
=========================== $test_num STATUS  ===========================
`ls -al /etc/rsyslog.conf /etc/syslog.conf`
=========================================================================



EOF
#변수 초기화
unset i test_num check_status test_check
}

u12(){
  test_num="u12"

  sudo chmod 644 /etc/services
  sudo chown root /etc/services

  test_check=`ls -al /etc/services |grep -c ".rw-r--r--."`
  i="1"
  test_check2=`ls -al /etc/services |grep -c "root"`
  j="1"

  if_case2


cat << EOF >> $output_code
>>$check_status ( /etc/services 파일 권한 적절성 점검  )
=========================== $test_num STATUS  ===========================
`ls -al /etc/services`
=========================================================================



EOF
#변수 초기화
unset i test_num check_status test_check
}

u13(){
  test_num="u13"
  check_status="$test_num INFO"

cat << EOF >> $output_code
>>$check_status ( 불필요하거나 악의적인 파일에 SUID, SGID 설정 여부 점검 )
=========================== $test_num STATUS  ===========================
`find / -xdev -user root -type f \( -perm -4000 -o -perm -2000 \) -ls`
=========================================================================



EOF
#변수 초기화
unset i test_num check_status test_check
}

u14(){
  test_num="u14"
  check_status="$test_num INFO"
  chmod o-w /home/*

cat << EOF >> $output_code
>>$check_status ( )
=========================== $test_num STATUS  ===========================
`ls -al /home`

If the owner name and directory name are the same, run the following command.

sudo chmod 755 /home/`ls -l /home  |awk '{print $9}' | sed '/^$/d'`
sudo chown `ls -l /home  |awk '{print $9}' | sed '/^$/d'`  /home/`ls -l /home  |awk '{print $9}' | sed '/^$/d'`
=========================================================================



EOF

#변수 초기화
unset i test_num check_status test_check
}


u15(){
  test_num="u15"
  test_check=`find / -type f -perm -2 -exec ls -l {} \; |grep -vce fs -e proc`
  i="0"
  if_case

  if [ "$?" =  "1" ];then
    if_info
  fi


cat << EOF >> $output_code
>>$check_status ( 불필요한 world writable 파일 존재 여부 점검 )
=========================== $test_num STATUS  ===========================
`find / -type f -perm -2 -exec ls -l {} \; |grep -ve fs -e proc`

It is a world writable file and should be deleted.

rm -rf [file_name]
=========================================================================



EOF

#변수 초기화
unset i test_num check_status test_check
}


u16(){
  test_num="u16"
  test_check=` find /dev -type f -exec ls -l {} \; |wc -l`
  i="0"
  if_case

  if [ "$?" =  "1" ];then
    if_info
  fi

cat << EOF >> $output_code
>>$check_status ( 존재하지 않는 device 파일 존재 여부 점검 )
=========================== $test_num STATUS  ===========================
`find /dev -type f -exec ls -l {} \;`
=========================================================================



EOF

#변수 초기화
unset i test_num check_status test_check
}

u17(){
  test_num="u17"
  test_check=`cat /home/*/.rhosts 2>/dev/null  | grep -c '+'`
  i="0"
  if_case
  if [ "$?" =  "1" ];then
    #여기에 적용할 것들 사용하면 됨
    sudo chown root /home/*/.rhosts
    sudo chmod 600 /home/*/.rhosts
  fi

  if [ -e /etc/hosts.equiv ]; then
    sudo chown root /etc/hosts.equiv
    sudo chmod 600 /etc/hosts.equiv

    test_check=`cat /etc/hosts.equiv | grep -c '+'`
    i="0"
    if_case
  fi

cat << EOF >> $output_code
>>$check_status ( /etc/hosts.equiv  파일  및  .rhosts  파일 설정에 ‘+’ 설정 이 포함되지 않도록 설정 )
=========================== $test_num STATUS  ===========================
`cat /etc/hosts.equiv 2>/dev/null |grep -i '+'`
`cat /home/*/.rhosts 2>/dev/null |grep -i '+'`
=========================================================================



EOF

#변수 초기화
unset i test_num check_status test_check
}

u18(){
  test_num="u18"
  if_info


cat << EOF >> $output_code
>>$check_status ( 접속 IP 주소 제한 및 포트 제한 설정 여부 점검 )
=========================== $test_num STATUS  ===========================
- TCP Warrper
`cat /etc/hosts.deny |grep -v '#'`
`cat /etc/hosts.allow |grep -v '#'`
- iptables
` iptables -L  2>/dev/null`
=========================================================================



EOF

#변수 초기화
unset i test_num check_status test_check
}


u19(){
  test_num="u19"
  test_check=`cat /etc/inetd.conf 2>/dev/null |wc -l`
  i="0"
  test_check=`cat /etc/xinetd.d/finger 2>/dev/null |wc -l`
  j="0"
  if_case2

  if [ "$?" =  "1" ];then
    sed -i  's/finger stream tcp nowait /#finger stream tcp nowait/g' /etc/inetd.conf
    test_check=``
    if_case
  fi

cat << EOF >> $output_code
>>$check_status ( finger 서비스 비활성화 여부 점검 )
=========================== $test_num STATUS  ===========================
If the status is WARN or INFO , run the following command.

kill -9 $(ps -aux |grep '$(inetd)' |awk '{print $2}' )
sed -i 's/finger stream tcp nowait /#finger stream tcp nowait/g' /etc/inetd.conf
sed -i 's/disable         = no/disable         = yes/g'
=========================================================================



EOF

#변수 초기화
unset i test_num check_status test_check
}


u20(){
  test_num="u20"
  test_check=`cat /etc/passwd | grep -c "ftp"`
  i="0"
  test_check=`cat /etc/vsftpd/vsftpd.conf |grep 'anonymous_enable=NO'`
  j="1"
  if_case2

cat << EOF >> $output_code
>>$check_status ( 익명 FTP 접속 허용 여부 점검 )
=========================== $test_num STATUS  ===========================
If the status is WARN or INFO , run the following command.

userdel ftp
sed -i 's/anonymous_enable=YES/anonymous_enable=NO/g' /etc/vsftpd/vsftpd.conf
=========================================================================



EOF

#변수 초기화
unset i test_num check_status test_check
}


u21(){
  test_num="u21"
  test_check=`ls -alL /etc/xinetd.d/* | egrep "rsh|rlogin|rexec" | egrep -v "grep|klogin|kshell|kexec" |wc -l`
  i="0"
  if_case

cat << EOF >> $output_code
>>$check_status ( r-command 서비스 비활성화 여부 점검 )
=========================== $test_num STATUS  ===========================
If the status is WARN or INFO , run the following command.

sed 's/disable/\#disable/g' /etc/xinetd.d/rlogin
sed '/disable/a disable         = no' /etc/xinetd.d/rlogin
sed '/\#disable/d' /etc/xinetd.d/rlogin

sed 's/disable/\#disable/g' /etc/xinetd.d/rsh
sed '/disable/a disable         = no' /etc/xinetd.d/rsh
sed '/\#disable/d' /etc/xinetd.d/rsh

sed 's/disable/\#disable/g' /etc/xinetd.d/rexec
sed '/disable/a disable         = no' /etc/xinetd.d/rexec
sed '/\#disable/d' /etc/xinetd.d/rexec
=========================================================================



EOF

#변수 초기화
unset i test_num check_status test_check
}

u22(){
  test_num="u22"
  chmod 750 /usr/bin/crontab 2>/dev/null
  chown root /etc/cron.d/cron.allow 2>/dev/null
  chmod 640 /etc/cron.d/cron.allow 2>/dev/null
  chown root /etc/cron.d/cron.deny 2>/dev/null
  chmod 640 /etc/cron.d/cron.deny 2>/dev/null

  check_status="$test_num [OK]"
  output_code=log_name.log


cat << EOF >> $output_code
>>$check_status ( Cron 관련 파일의 권한 적절성 점검 )
=========================== $test_num STATUS  ===========================
`cat /etc/cron.d/cron.allow 2>/dev/null`
`cat /etc/cron.d/cron.deny 2>/dev/null`
=========================================================================



EOF

#변수 초기화
unset i test_num check_status test_check
}


u23(){
  test_num="u23"
  test_check=`ls -al  /etc/xinetd.d/ | egrep -c  "discard|daytime|chargen|echo"`
  i="0"
  if_case

  if [ "$?" =  "1" ];then
    #여기에 적용할 것들 사용하면 됨
    for i in $(ls /etc/xinetd.d/ | egrep "discard|daytime|chargen|echo")
    do
      sed -i 's/disable/\#disable/g' /etc/xinetd.d/$i
      sed -i '/disable/a disable         = no' /etc/xinetd.d/$i
      sed -i  '/\#disable/d' /etc/xinetd.d/$i
    done
    check_status="$test_num [OK]"
    output_code=log_name.log

  fi

cat << EOF >> $output_code
>>$check_status ( 사용하지 않는 Dos 공격에 취약한 서비스의 실행 여부 점검 )
=========================== $test_num STATUS  ===========================
`ls -al  /etc/xinetd.d/ | egrep "discard|daytime|chargen|echo"`
=========================================================================



EOF

#변수 초기화
unset i test_num check_status test_check
}


u24(){
  test_num="u24"
  if_info


cat << EOF >> $output_code
>>$check_status ( 불필요한 NFS 서비스 사용여부 점검 )
=========================== $test_num STATUS  ===========================
`ps -ef | egrep "nfs|statd|lockd"`
`ls -al /etc/rc.d/rc*.d/* | grep nfs`
=========================================================================



EOF

#변수 초기화
unset i test_num check_status test_check
}



u25(){
  test_num="u25"
  test_check=`cat /etc/exports|wc -l`
  i="0"
  if_case

cat << EOF >> $output_code
>>$check_status ( NFS 사용 시 허가된 사용자만 접속할 수 있도록 접근제한 설정 적용 여부 )
=========================== $test_num STATUS  ===========================
If the status is WARN or INFO , run the following command.
-  /etc/export config add "root_squash"
ex)  /stand host1 (root_squash)
=========================================================================



EOF

#변수 초기화
unset i test_num check_status test_check
}

u26(){
  test_num="u26"
  test_check=`ps -ef | grep -e  automount -e autofs |wc -l`
  i="0"
  if_case

cat << EOF >> $output_code
>>$check_status ( automountd 서비스 데몬의 실행 여부 점검 )
=========================== $test_num STATUS  ===========================
- ps list
`ps -ef | grep -e  automount -e autofs `

If the status is WARN or INFO , run the following command.
kill -9 \$(ps -aux |grep '\$(automount)' |awk '{print \$2}')
kill -9 \$(ps -aux |grep '\$(autofs)' |awk '{print \$2}' )
=========================================================================



EOF

#변수 초기화
unset i test_num check_status test_check
}


u27(){
  test_num="u27"
  test_check=`cat /etc/inetd.conf 2>/dev/null | wc -l `
  i="0"
  if_case


cat << EOF >> $output_code
>>$check_status ( 불필요한 RPC 서비스의 실행 여부 점검 )
=========================== $test_num STATUS  ===========================
If the status is WARN or INFO , run the following command.
/etc/inetd.conf setting and '#'
rpc.cmsd/2-4 dgram rpc/udp wait root /usr/dt/bin/rpc.cmsd rpc.cmsd
#rpc.cmsd/2-4 dgram rpc/udp wait root /usr/dt/bin/rpc.cmsd rpc.cmsd
=========================================================================



EOF

#변수 초기화
unset i test_num check_status test_check
}

u28(){
  test_num="u28"
  test_check=`ps -ef | egrep -c  "ypserv|ypbind|ypxfrd|rpc.yppasswdd|rpc.ypupdated"`
  i="0"
  if_case

cat << EOF >> $output_code
>>$check_status ( 안전하지  않은  NIS  서비스의  비활성화 )
=========================== $test_num STATUS  ===========================
`ps -ef | egrep "ypserv|ypbind|ypxfrd|rpc.yppasswdd|rpc.ypupdated"`

If the status is WARN or INFO , run the following command.
kill -9 \$(ps -aux |egrep "ypserv|ypbind|ypxfrd|rpc.yppasswdd|rpc.ypupdated" |awk '{print \$2}')
=========================================================================



EOF
#변수 초기화
unset i test_num check_status test_check
}

u29(){
  test_num="u29"
  test_check=`ls /etc/xinetd.d/ | egrep -c  "tftp|talk|ntalk"`
  i="0"
  if_case

cat << EOF >> $output_code
>>$check_status ( ftp, talk 등의 서비스를 사용하지 않거나 취약점이 발표된 서비스의 활성화 여부 점검 )
=========================== $test_num STATUS  ===========================
`ls /etc/xinetd.d/ | egrep "tftp|talk|ntalk"`
If the status is WARN or INFO , run the following command.

    for i in \$(ls /etc/xinetd.d/ | egrep "tftp|talk|ntalk")
    do
      sed -i 's/disable/\\#disable/g' /etc/xinetd.d/\$i
      sed -i '/disable/a disable         = no' /etc/xinetd.d/\$i
      sed -i  '/\\#disable/d' /etc/xinetd.d/\$i
    done
=========================================================================



EOF

#변수 초기화
unset i test_num check_status test_check
}

u30(){
  test_num="u30"
  test_check=` ps -ef | grep -c sendmail`
  i="0"
  if_case


cat << EOF >> $output_code
>>$check_status ( 취약한 버전의 Sendmail 서비스 이용 여부 점검 )
=========================== $test_num STATUS  ===========================
If the status is WARN or INFO , run the following command.
yum update sendmail
=========================================================================



EOF
#변수 초기화
unset i test_num check_status test_check
}

u31(){
  test_num="u31"
  test_check=`ps -ef | grep -c sendmail`
  i="0"
  if_case

cat << EOF >> $output_code
>>$check_status ( SMTP 서버의 릴레이 기능 제한 여부 점검 )
=========================== $test_num STATUS  ===========================
If the status is WARN or INFO , run the following command.

active config in /etc/mail/sendmail.cf
R\$*                     \$#error \$@ 5.7.1 \$: "550 Relaying denied"

`cat  /etc/mail/sendmail.cf | grep "550 Relaying denied"`
=========================================================================



EOF

#변수 초기화
unset i test_num check_status test_check
}

u32(){
  test_num="u32"
  test_check=`ps -ef | grep sendmail`
  i="0"
  if_case

  if [ "$?" =  "1" ];then
    #여기에 적용할 것들 사용하면 됨

    test_check=`grep -v '^ *#' /etc/mail/sendmail.cf | grep PrivacyOptions |grep -c restrictqrun`
    i=1
    if_case
  fi

cat << EOF >> $output_code
>>$check_status ( SMTP 서비스 사용 시 일반사용자의 q 옵션 제한 여부 점검)
=========================== $test_num STATUS  ===========================
If the status is WARN or INFO , run the following command.

/etc/mail/sendmail.cf  PrivacyOptions config add restrictqrun

ex) O PrivacyOptions=authwarnings,novrfy,noexpn,restrictqrun
=========================================================================




EOF

#변수 초기화
unset i test_num check_status test_check
}


u33(){
  test_num="u33"
  test_check=`ps -ef | grep -c named`
  i="0"
  if_case


cat << EOF >> $output_code
>>$check_status ( )
=========================== $test_num STATUS  ===========================
If the status is WARN or INFO , run the following command.
yum update bind -y
=========================================================================



EOF

#변수 초기화
unset i test_num check_status test_check
}



u34(){
  test_num="u34"
  test_check=`ps -ef | grep -c named`
  i="0"
  if_case

  if [ "$?" =  "1" ];then
    #여기에 적용할 것들 사용하면 됨
    test_check =`cat /etc/named.conf 2>/dev/null | grep -c 'allow-transfer'`
    i="0"
    if_case
  fi

cat << EOF >> $output_code
>>$check_status ( econdary Name Server로만 Zone 정보 전송 제한 여부 점검 )
=========================== $test_num STATUS  ===========================
If the status is WARN or INFO , run the following command.
 /etc/named.conf config need to change the setting from 'allow-transfer' to 'xfrnets'

ex_)
Options {
                allow-transfer (존 파일 전송을 허용하고자 하는 IP;);
        };
---

Options
        xfrnets 허용하고자 하는 IP
=========================================================================



EOF

#변수 초기화
unset i test_num check_status test_check
}





u35(){ 
  test_num="u35"
  test_check=`ps -ef |grep -ic httpd`
  i="0"
  if_case

  if [ "$?" =  "1" ];then
    test_check=`cat  /etc/httpd/conf/httpd.conf 2>/dev/null |grep "Indexes FollowSymLinks"`
    i="0"
    if_case
  fi


cat << EOF >> $output_code
>>$check_status ( 디렉터리 검색 기능의 활성화 여부 점검 )
=========================== $test_num STATUS  ===========================
If the status is WARN or INFO , run the following command.
 sed 's/Indexes FollowSymLinks/ -Indexes/g'  /etc/httpd/conf/httpd.conf 

systemctl restart httpd
=========================================================================



EOF

#변수 초기화 
unset i test_num check_status test_check
}



u36(){ 
  test_num="u36"
  test_check=`ps -ef |grep -ic httpd`
  i="0"
  if_case

  if [ "$?" =  "1" ];then
    test_check=`cat  /etc/httpd/conf/httpd.conf 2>/dev/null |egrep -c  "User root|Group root"`
    if_case
  fi

cat << EOF >> $output_code
>>$check_status ( Apache 데몬이 root 권한으로 구동되는지 여부 점검 )
=========================== $test_num STATUS  ===========================
If the status is WARN or INFO , run the following command.
Do not set it to root, set it to a different ID in httpd.conf 
ex_)
  User (not root, other user)
  Group (not root, other user)

systemctl restart httpd
=========================================================================



EOF

#변수 초기화 
unset i test_num check_status test_check
}


u37(){ 
  test_num="u37"
  test_check=`ps -ef |grep -ic httpd`
  i="0"
  if_case

  if [ "$?" =  "1" ];then
    #여기에 적용할 것들 사용하면 됨

    test_check=`cat  /etc/httpd/conf/httpd.conf 2>/dev/null |egrep -c "AllowOverride None"`
    if_case
  fi

cat << EOF >> $output_code
>>$check_status ( “..” 와 같은 문자 사용 등으로 상위 경로로 이동이 가능한지 여부 점검 )
=========================== $test_num STATUS  ===========================
If the status is WARN or INFO , run the following command.
/etc/named.conf config need to change the setting from 'AllowOverride None' to 'AllowOverride AuthConfig'

ex_)
step 1.
<Directory “/usr/local/apache2/htdocs”>     
  AllowOverride None     >>        AllowOverride AuthConfig
  Allow from all

step 2.
  AuthName "디렉터리 사용자 인증"
  AuthType Basic
  AuthUserFile /usr/local/apache/test/.auth
  Require valid-user

step 3. "Create an ID and password to be used for user authentication." 
  htpasswd -c /usr/local/apache/test/.auth test     
  New password:     
  Re-type new password:     
  Adding password for user test
=========================================================================



EOF

#변수 초기화 
unset i test_num check_status test_check
}



u38(){ 
  test_num="u38"
  test_check=`ps -ef |grep -ic httpd`
  i="0"
  if_case

cat << EOF >> $output_code
>>$check_status ( Apache 설치 시 기본으로 생성되는 불필요한 파일의 삭제 여부 점검 )
=========================== $test_num STATUS  ===========================
If the status is WARN or INFO , run the following command.

rm -rf /[Apache_home]/htdocs/manual
rm -rf /[Apache_home]/manual
=========================================================================



EOF

#변수 초기화 
unset i test_num check_status test_check
}


u39(){ 
  test_num="u39"
  test_check=`ps -ef |grep -ic httpd`
  i="0"
  if_case

  if [ "$?" =  "1" ];then
    #여기에 적용할 것들 사용하면 됨
    test_check=` cat  /etc/httpd/conf/httpd.conf 2>/dev/null |grep -c "Indexes FollowSymLinks"`
    if_case
  fi

cat << EOF >> $output_code
>>$check_status ( Apache 설치 시 기본으로 생성되는 불필요한 파일의 삭제 여부 점검 )
=========================== $test_num STATUS  ===========================
If the status is WARN or INFO , run the following command.

 sed -i 's/Indexes FollowSymLinks/-FollowSymLinks/g' /etc/httpd/conf/httpd.conf 
=========================================================================



EOF

#변수 초기화 
unset i test_num check_status test_check
}


u40(){ 
  test_num="u40"
  test_check=`ps -ef |grep -ic httpd`
  i="0"
  if_case


cat << EOF >> $output_code
>>$check_status ( 파일 업로드 및 다운로드의 사이즈 제한 여부 점검 )
=========================== $test_num STATUS  ===========================
If the status is WARN or INFO , run the following command.

ex_)
#vi /[Apache_home]/conf/httpd.conf
  <Directory />
    LimitRequestBody 5000000 
  </Directory>
=========================================================================


EOF

#변수 초기화 
unset i test_num check_status test_check
}



u41(){ 
  test_num="u41"
  test_check=`ps -ef |grep -ic httpd`
  i="0"
  if_case
  if [ "$?" =  "1" ];then
    #여기에 적용할 것들 사용하면 됨
    test_check=`cat /etc/httpd/conf/httpd.conf | grep DocumentRoot |egrep -c "/var/www/html|/usr/local/apache/htdocs|/usr/local/apache2/htdocs"`
    if [ "$?" =  "1" ];then
      check_status="$test_num [WARN]"
      output_code="test_log_name.log"
    else 
      if_case
    fi
  fi

cat << EOF >> $output_code
>>$check_status ( 웹 서버의 루트 디렉터리와 OS의 루트 디렉터리를 다르게 지정하였는지 점검 )
=========================== $test_num STATUS  ===========================
If the status is WARN or INFO , run the following command.
- Do not setting DocumentRoot list -
DocumentRoot "/usr/local/apache/htdocs" 
DocumentRoot "/usr/local/apache2/htdocs" 
DocumentRoot "/var/www/html"
=========================================================================



EOF

#변수 초기화 
unset i test_num check_status test_check
}



u42(){ 
  test_num="u42"
  if_info

cat << EOF >> $output_code
>>$check_status ( 시스템에서 최신 패치가 적용되어 있는지 점검 )
=========================== $test_num STATUS  ===========================
- Linux Version
`cat /etc/*release`

- Kernel Version
`uname -r`
=========================================================================



EOF

#변수 초기화 
unset i test_num check_status test_check
}


u43(){ 
  test_num="u43"
  if_info

cat << EOF >> $output_code
>>$check_status ( 로그의 정기적 검토 및 보고 여부 점검 )
=========================== $test_num STATUS  ===========================
- last
`last`

- lastb
`lastb`

- who
`w`

- sulog
`cat /var/log/secure`

- xferlog
`cat /var/log/xferlog`
=========================================================================



EOF
#변수 초기화 
unset i test_num check_status test_check
}



u(){ 
  test_num="u"
  test_check=``
  i="1"
  if_case

  if [ "$?" =  "1" ];then
    #여기에 적용할 것들 사용하면 됨
    test_check=``
    if_case
  fi

cat << EOF >> $output_code
>>$check_status ( )
===========================  $test_num STATUS  ===========================
If the status is WARN or INFO , run the following command.
=========================================================================



EOF
#변수 초기화 
unset i test_num check_status test_check
}




__main__(){
for x in {1..36}
do
  echo u$x;
done

#마지막 ok로 그랩 당겨서 숫자만큼 안나오면 애러 라고 발송하면 됨
}

__main__
